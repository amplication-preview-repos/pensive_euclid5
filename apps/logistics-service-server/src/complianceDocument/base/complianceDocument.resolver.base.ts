/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ComplianceDocument } from "./ComplianceDocument";
import { ComplianceDocumentCountArgs } from "./ComplianceDocumentCountArgs";
import { ComplianceDocumentFindManyArgs } from "./ComplianceDocumentFindManyArgs";
import { ComplianceDocumentFindUniqueArgs } from "./ComplianceDocumentFindUniqueArgs";
import { CreateComplianceDocumentArgs } from "./CreateComplianceDocumentArgs";
import { UpdateComplianceDocumentArgs } from "./UpdateComplianceDocumentArgs";
import { DeleteComplianceDocumentArgs } from "./DeleteComplianceDocumentArgs";
import { TruckFindManyArgs } from "../../truck/base/TruckFindManyArgs";
import { Truck } from "../../truck/base/Truck";
import { ComplianceDocumentService } from "../complianceDocument.service";
@graphql.Resolver(() => ComplianceDocument)
export class ComplianceDocumentResolverBase {
  constructor(protected readonly service: ComplianceDocumentService) {}

  async _complianceDocumentsMeta(
    @graphql.Args() args: ComplianceDocumentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ComplianceDocument])
  async complianceDocuments(
    @graphql.Args() args: ComplianceDocumentFindManyArgs
  ): Promise<ComplianceDocument[]> {
    return this.service.complianceDocuments(args);
  }

  @graphql.Query(() => ComplianceDocument, { nullable: true })
  async complianceDocument(
    @graphql.Args() args: ComplianceDocumentFindUniqueArgs
  ): Promise<ComplianceDocument | null> {
    const result = await this.service.complianceDocument(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ComplianceDocument)
  async createComplianceDocument(
    @graphql.Args() args: CreateComplianceDocumentArgs
  ): Promise<ComplianceDocument> {
    return await this.service.createComplianceDocument({
      ...args,
      data: {
        ...args.data,

        truck: args.data.truck
          ? {
              connect: args.data.truck,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ComplianceDocument)
  async updateComplianceDocument(
    @graphql.Args() args: UpdateComplianceDocumentArgs
  ): Promise<ComplianceDocument | null> {
    try {
      return await this.service.updateComplianceDocument({
        ...args,
        data: {
          ...args.data,

          truck: args.data.truck
            ? {
                connect: args.data.truck,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ComplianceDocument)
  async deleteComplianceDocument(
    @graphql.Args() args: DeleteComplianceDocumentArgs
  ): Promise<ComplianceDocument | null> {
    try {
      return await this.service.deleteComplianceDocument(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Truck], { name: "trucks" })
  async findTrucks(
    @graphql.Parent() parent: ComplianceDocument,
    @graphql.Args() args: TruckFindManyArgs
  ): Promise<Truck[]> {
    const results = await this.service.findTrucks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Truck, {
    nullable: true,
    name: "truck",
  })
  async getTruck(
    @graphql.Parent() parent: ComplianceDocument
  ): Promise<Truck | null> {
    const result = await this.service.getTruck(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
