/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TruckService } from "../truck.service";
import { TruckCreateInput } from "./TruckCreateInput";
import { Truck } from "./Truck";
import { TruckFindManyArgs } from "./TruckFindManyArgs";
import { TruckWhereUniqueInput } from "./TruckWhereUniqueInput";
import { TruckUpdateInput } from "./TruckUpdateInput";
import { ComplianceDocumentFindManyArgs } from "../../complianceDocument/base/ComplianceDocumentFindManyArgs";
import { ComplianceDocument } from "../../complianceDocument/base/ComplianceDocument";
import { ComplianceDocumentWhereUniqueInput } from "../../complianceDocument/base/ComplianceDocumentWhereUniqueInput";
import { ContractFindManyArgs } from "../../contract/base/ContractFindManyArgs";
import { Contract } from "../../contract/base/Contract";
import { ContractWhereUniqueInput } from "../../contract/base/ContractWhereUniqueInput";
import { DriverFindManyArgs } from "../../driver/base/DriverFindManyArgs";
import { Driver } from "../../driver/base/Driver";
import { DriverWhereUniqueInput } from "../../driver/base/DriverWhereUniqueInput";

export class TruckControllerBase {
  constructor(protected readonly service: TruckService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Truck })
  async createTruck(@common.Body() data: TruckCreateInput): Promise<Truck> {
    return await this.service.createTruck({
      data: {
        ...data,

        complianceDocument: data.complianceDocument
          ? {
              connect: data.complianceDocument,
            }
          : undefined,

        driver: data.driver
          ? {
              connect: data.driver,
            }
          : undefined,
      },
      select: {
        complianceDocument: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        driver: {
          select: {
            id: true,
          },
        },

        id: true,
        registrationNumber: true,
        truckNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Truck] })
  @ApiNestedQuery(TruckFindManyArgs)
  async trucks(@common.Req() request: Request): Promise<Truck[]> {
    const args = plainToClass(TruckFindManyArgs, request.query);
    return this.service.trucks({
      ...args,
      select: {
        complianceDocument: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        driver: {
          select: {
            id: true,
          },
        },

        id: true,
        registrationNumber: true,
        truckNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Truck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async truck(
    @common.Param() params: TruckWhereUniqueInput
  ): Promise<Truck | null> {
    const result = await this.service.truck({
      where: params,
      select: {
        complianceDocument: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        driver: {
          select: {
            id: true,
          },
        },

        id: true,
        registrationNumber: true,
        truckNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Truck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTruck(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() data: TruckUpdateInput
  ): Promise<Truck | null> {
    try {
      return await this.service.updateTruck({
        where: params,
        data: {
          ...data,

          complianceDocument: data.complianceDocument
            ? {
                connect: data.complianceDocument,
              }
            : undefined,

          driver: data.driver
            ? {
                connect: data.driver,
              }
            : undefined,
        },
        select: {
          complianceDocument: {
            select: {
              id: true,
            },
          },

          createdAt: true,

          driver: {
            select: {
              id: true,
            },
          },

          id: true,
          registrationNumber: true,
          truckNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Truck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTruck(
    @common.Param() params: TruckWhereUniqueInput
  ): Promise<Truck | null> {
    try {
      return await this.service.deleteTruck({
        where: params,
        select: {
          complianceDocument: {
            select: {
              id: true,
            },
          },

          createdAt: true,

          driver: {
            select: {
              id: true,
            },
          },

          id: true,
          registrationNumber: true,
          truckNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/complianceDocuments")
  @ApiNestedQuery(ComplianceDocumentFindManyArgs)
  async findComplianceDocuments(
    @common.Req() request: Request,
    @common.Param() params: TruckWhereUniqueInput
  ): Promise<ComplianceDocument[]> {
    const query = plainToClass(ComplianceDocumentFindManyArgs, request.query);
    const results = await this.service.findComplianceDocuments(params.id, {
      ...query,
      select: {
        createdAt: true,
        documentName: true,
        documentType: true,
        id: true,

        truck: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        validFrom: true,
        validUntil: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/complianceDocuments")
  async connectComplianceDocuments(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: ComplianceDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complianceDocuments: {
        connect: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/complianceDocuments")
  async updateComplianceDocuments(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: ComplianceDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complianceDocuments: {
        set: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/complianceDocuments")
  async disconnectComplianceDocuments(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: ComplianceDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complianceDocuments: {
        disconnect: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/contracts")
  @ApiNestedQuery(ContractFindManyArgs)
  async findContracts(
    @common.Req() request: Request,
    @common.Param() params: TruckWhereUniqueInput
  ): Promise<Contract[]> {
    const query = plainToClass(ContractFindManyArgs, request.query);
    const results = await this.service.findContracts(params.id, {
      ...query,
      select: {
        contractNumber: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,
        startDate: true,
        status: true,

        supplier: {
          select: {
            id: true,
          },
        },

        truck: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/contracts")
  async connectContracts(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        connect: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/contracts")
  async updateContracts(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        set: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/contracts")
  async disconnectContracts(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        disconnect: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/drivers")
  @ApiNestedQuery(DriverFindManyArgs)
  async findDrivers(
    @common.Req() request: Request,
    @common.Param() params: TruckWhereUniqueInput
  ): Promise<Driver[]> {
    const query = plainToClass(DriverFindManyArgs, request.query);
    const results = await this.service.findDrivers(params.id, {
      ...query,
      select: {
        createdAt: true,
        currentLocation: true,
        id: true,
        licenseNumber: true,
        name: true,

        truck: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/drivers")
  async connectDrivers(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: DriverWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      drivers: {
        connect: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/drivers")
  async updateDrivers(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: DriverWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      drivers: {
        set: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/drivers")
  async disconnectDrivers(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: DriverWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      drivers: {
        disconnect: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }
}
