/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ComplianceDocumentService } from "../complianceDocument.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ComplianceDocumentCreateInput } from "./ComplianceDocumentCreateInput";
import { ComplianceDocument } from "./ComplianceDocument";
import { ComplianceDocumentFindManyArgs } from "./ComplianceDocumentFindManyArgs";
import { ComplianceDocumentWhereUniqueInput } from "./ComplianceDocumentWhereUniqueInput";
import { ComplianceDocumentUpdateInput } from "./ComplianceDocumentUpdateInput";
import { TruckFindManyArgs } from "../../truck/base/TruckFindManyArgs";
import { Truck } from "../../truck/base/Truck";
import { TruckWhereUniqueInput } from "../../truck/base/TruckWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ComplianceDocumentControllerBase {
  constructor(
    protected readonly service: ComplianceDocumentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ComplianceDocument })
  @nestAccessControl.UseRoles({
    resource: "ComplianceDocument",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createComplianceDocument(
    @common.Body() data: ComplianceDocumentCreateInput
  ): Promise<ComplianceDocument> {
    return await this.service.createComplianceDocument({
      data: {
        ...data,

        truck: data.truck
          ? {
              connect: data.truck,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        documentName: true,
        documentType: true,
        id: true,

        truck: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        validFrom: true,
        validUntil: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ComplianceDocument] })
  @ApiNestedQuery(ComplianceDocumentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ComplianceDocument",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async complianceDocuments(
    @common.Req() request: Request
  ): Promise<ComplianceDocument[]> {
    const args = plainToClass(ComplianceDocumentFindManyArgs, request.query);
    return this.service.complianceDocuments({
      ...args,
      select: {
        createdAt: true,
        documentName: true,
        documentType: true,
        id: true,

        truck: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        validFrom: true,
        validUntil: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ComplianceDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ComplianceDocument",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async complianceDocument(
    @common.Param() params: ComplianceDocumentWhereUniqueInput
  ): Promise<ComplianceDocument | null> {
    const result = await this.service.complianceDocument({
      where: params,
      select: {
        createdAt: true,
        documentName: true,
        documentType: true,
        id: true,

        truck: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        validFrom: true,
        validUntil: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ComplianceDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ComplianceDocument",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateComplianceDocument(
    @common.Param() params: ComplianceDocumentWhereUniqueInput,
    @common.Body() data: ComplianceDocumentUpdateInput
  ): Promise<ComplianceDocument | null> {
    try {
      return await this.service.updateComplianceDocument({
        where: params,
        data: {
          ...data,

          truck: data.truck
            ? {
                connect: data.truck,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          documentName: true,
          documentType: true,
          id: true,

          truck: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          validFrom: true,
          validUntil: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ComplianceDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ComplianceDocument",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteComplianceDocument(
    @common.Param() params: ComplianceDocumentWhereUniqueInput
  ): Promise<ComplianceDocument | null> {
    try {
      return await this.service.deleteComplianceDocument({
        where: params,
        select: {
          createdAt: true,
          documentName: true,
          documentType: true,
          id: true,

          truck: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          validFrom: true,
          validUntil: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/trucks")
  @ApiNestedQuery(TruckFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "read",
    possession: "any",
  })
  async findTrucks(
    @common.Req() request: Request,
    @common.Param() params: ComplianceDocumentWhereUniqueInput
  ): Promise<Truck[]> {
    const query = plainToClass(TruckFindManyArgs, request.query);
    const results = await this.service.findTrucks(params.id, {
      ...query,
      select: {
        complianceDocument: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        driver: {
          select: {
            id: true,
          },
        },

        id: true,
        registrationNumber: true,
        truckNumber: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/trucks")
  @nestAccessControl.UseRoles({
    resource: "ComplianceDocument",
    action: "update",
    possession: "any",
  })
  async connectTrucks(
    @common.Param() params: ComplianceDocumentWhereUniqueInput,
    @common.Body() body: TruckWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      trucks: {
        connect: body,
      },
    };
    await this.service.updateComplianceDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/trucks")
  @nestAccessControl.UseRoles({
    resource: "ComplianceDocument",
    action: "update",
    possession: "any",
  })
  async updateTrucks(
    @common.Param() params: ComplianceDocumentWhereUniqueInput,
    @common.Body() body: TruckWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      trucks: {
        set: body,
      },
    };
    await this.service.updateComplianceDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/trucks")
  @nestAccessControl.UseRoles({
    resource: "ComplianceDocument",
    action: "update",
    possession: "any",
  })
  async disconnectTrucks(
    @common.Param() params: ComplianceDocumentWhereUniqueInput,
    @common.Body() body: TruckWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      trucks: {
        disconnect: body,
      },
    };
    await this.service.updateComplianceDocument({
      where: params,
      data,
      select: { id: true },
    });
  }
}
