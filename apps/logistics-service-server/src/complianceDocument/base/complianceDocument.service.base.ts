/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ComplianceDocument as PrismaComplianceDocument,
  Truck as PrismaTruck,
} from "@prisma/client";

export class ComplianceDocumentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ComplianceDocumentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.complianceDocument.count(args);
  }

  async complianceDocuments(
    args: Prisma.ComplianceDocumentFindManyArgs
  ): Promise<PrismaComplianceDocument[]> {
    return this.prisma.complianceDocument.findMany(args);
  }
  async complianceDocument(
    args: Prisma.ComplianceDocumentFindUniqueArgs
  ): Promise<PrismaComplianceDocument | null> {
    return this.prisma.complianceDocument.findUnique(args);
  }
  async createComplianceDocument(
    args: Prisma.ComplianceDocumentCreateArgs
  ): Promise<PrismaComplianceDocument> {
    return this.prisma.complianceDocument.create(args);
  }
  async updateComplianceDocument(
    args: Prisma.ComplianceDocumentUpdateArgs
  ): Promise<PrismaComplianceDocument> {
    return this.prisma.complianceDocument.update(args);
  }
  async deleteComplianceDocument(
    args: Prisma.ComplianceDocumentDeleteArgs
  ): Promise<PrismaComplianceDocument> {
    return this.prisma.complianceDocument.delete(args);
  }

  async findTrucks(
    parentId: string,
    args: Prisma.TruckFindManyArgs
  ): Promise<PrismaTruck[]> {
    return this.prisma.complianceDocument
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .trucks(args);
  }

  async getTruck(parentId: string): Promise<PrismaTruck | null> {
    return this.prisma.complianceDocument
      .findUnique({
        where: { id: parentId },
      })
      .truck();
  }
}
