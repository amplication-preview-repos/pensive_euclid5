/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TruckService } from "../truck.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TruckCreateInput } from "./TruckCreateInput";
import { Truck } from "./Truck";
import { TruckFindManyArgs } from "./TruckFindManyArgs";
import { TruckWhereUniqueInput } from "./TruckWhereUniqueInput";
import { TruckUpdateInput } from "./TruckUpdateInput";
import { ComplianceDocumentFindManyArgs } from "../../complianceDocument/base/ComplianceDocumentFindManyArgs";
import { ComplianceDocument } from "../../complianceDocument/base/ComplianceDocument";
import { ComplianceDocumentWhereUniqueInput } from "../../complianceDocument/base/ComplianceDocumentWhereUniqueInput";
import { ContractFindManyArgs } from "../../contract/base/ContractFindManyArgs";
import { Contract } from "../../contract/base/Contract";
import { ContractWhereUniqueInput } from "../../contract/base/ContractWhereUniqueInput";
import { DriverFindManyArgs } from "../../driver/base/DriverFindManyArgs";
import { Driver } from "../../driver/base/Driver";
import { DriverWhereUniqueInput } from "../../driver/base/DriverWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TruckControllerBase {
  constructor(
    protected readonly service: TruckService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Truck })
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTruck(@common.Body() data: TruckCreateInput): Promise<Truck> {
    return await this.service.createTruck({
      data: {
        ...data,

        complianceDocument: data.complianceDocument
          ? {
              connect: data.complianceDocument,
            }
          : undefined,

        driver: data.driver
          ? {
              connect: data.driver,
            }
          : undefined,
      },
      select: {
        complianceDocument: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        driver: {
          select: {
            id: true,
          },
        },

        id: true,
        registrationNumber: true,
        truckNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Truck] })
  @ApiNestedQuery(TruckFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async trucks(@common.Req() request: Request): Promise<Truck[]> {
    const args = plainToClass(TruckFindManyArgs, request.query);
    return this.service.trucks({
      ...args,
      select: {
        complianceDocument: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        driver: {
          select: {
            id: true,
          },
        },

        id: true,
        registrationNumber: true,
        truckNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Truck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async truck(
    @common.Param() params: TruckWhereUniqueInput
  ): Promise<Truck | null> {
    const result = await this.service.truck({
      where: params,
      select: {
        complianceDocument: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        driver: {
          select: {
            id: true,
          },
        },

        id: true,
        registrationNumber: true,
        truckNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Truck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTruck(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() data: TruckUpdateInput
  ): Promise<Truck | null> {
    try {
      return await this.service.updateTruck({
        where: params,
        data: {
          ...data,

          complianceDocument: data.complianceDocument
            ? {
                connect: data.complianceDocument,
              }
            : undefined,

          driver: data.driver
            ? {
                connect: data.driver,
              }
            : undefined,
        },
        select: {
          complianceDocument: {
            select: {
              id: true,
            },
          },

          createdAt: true,

          driver: {
            select: {
              id: true,
            },
          },

          id: true,
          registrationNumber: true,
          truckNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Truck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTruck(
    @common.Param() params: TruckWhereUniqueInput
  ): Promise<Truck | null> {
    try {
      return await this.service.deleteTruck({
        where: params,
        select: {
          complianceDocument: {
            select: {
              id: true,
            },
          },

          createdAt: true,

          driver: {
            select: {
              id: true,
            },
          },

          id: true,
          registrationNumber: true,
          truckNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/complianceDocuments")
  @ApiNestedQuery(ComplianceDocumentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ComplianceDocument",
    action: "read",
    possession: "any",
  })
  async findComplianceDocuments(
    @common.Req() request: Request,
    @common.Param() params: TruckWhereUniqueInput
  ): Promise<ComplianceDocument[]> {
    const query = plainToClass(ComplianceDocumentFindManyArgs, request.query);
    const results = await this.service.findComplianceDocuments(params.id, {
      ...query,
      select: {
        createdAt: true,
        documentName: true,
        documentType: true,
        id: true,

        truck: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        validFrom: true,
        validUntil: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/complianceDocuments")
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "update",
    possession: "any",
  })
  async connectComplianceDocuments(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: ComplianceDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complianceDocuments: {
        connect: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/complianceDocuments")
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "update",
    possession: "any",
  })
  async updateComplianceDocuments(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: ComplianceDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complianceDocuments: {
        set: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/complianceDocuments")
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "update",
    possession: "any",
  })
  async disconnectComplianceDocuments(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: ComplianceDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complianceDocuments: {
        disconnect: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/contracts")
  @ApiNestedQuery(ContractFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Contract",
    action: "read",
    possession: "any",
  })
  async findContracts(
    @common.Req() request: Request,
    @common.Param() params: TruckWhereUniqueInput
  ): Promise<Contract[]> {
    const query = plainToClass(ContractFindManyArgs, request.query);
    const results = await this.service.findContracts(params.id, {
      ...query,
      select: {
        contractNumber: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,
        startDate: true,
        status: true,

        supplier: {
          select: {
            id: true,
          },
        },

        truck: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/contracts")
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "update",
    possession: "any",
  })
  async connectContracts(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        connect: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/contracts")
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "update",
    possession: "any",
  })
  async updateContracts(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        set: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/contracts")
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "update",
    possession: "any",
  })
  async disconnectContracts(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: ContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contracts: {
        disconnect: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/drivers")
  @ApiNestedQuery(DriverFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Driver",
    action: "read",
    possession: "any",
  })
  async findDrivers(
    @common.Req() request: Request,
    @common.Param() params: TruckWhereUniqueInput
  ): Promise<Driver[]> {
    const query = plainToClass(DriverFindManyArgs, request.query);
    const results = await this.service.findDrivers(params.id, {
      ...query,
      select: {
        createdAt: true,
        currentLocation: true,
        id: true,
        licenseNumber: true,
        name: true,

        truck: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/drivers")
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "update",
    possession: "any",
  })
  async connectDrivers(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: DriverWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      drivers: {
        connect: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/drivers")
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "update",
    possession: "any",
  })
  async updateDrivers(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: DriverWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      drivers: {
        set: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/drivers")
  @nestAccessControl.UseRoles({
    resource: "Truck",
    action: "update",
    possession: "any",
  })
  async disconnectDrivers(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: DriverWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      drivers: {
        disconnect: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }
}
